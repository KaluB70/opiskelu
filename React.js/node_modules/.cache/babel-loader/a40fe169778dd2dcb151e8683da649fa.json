{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useContext, useEffect } from \"react\";\nimport { AppContext } from \"./app-context\";\n\nconst useQuotes = () => {\n  _s();\n\n  const [state, setState] = useContext(AppContext);\n  useEffect(() => {\n    // filterQuotes();\n    let quotes = state.quotes;\n    let newQuotes = [];\n    let wordCount = 1;\n\n    for (let i = 0; i < quotes.length; i++) {\n      const currentWord = quotes[i];\n\n      for (let j = 0; j < quotes[i].length; j++) {\n        const currentChar = currentWord.charAt(j);\n\n        if (currentChar === \" \") {\n          wordCount++;\n        }\n      }\n\n      if (wordCount >= state.filterAmount) {\n        newQuotes.push(currentWord);\n      }\n\n      wordCount = 1;\n    }\n\n    setState({ ...state,\n      filteredQuotes: newQuotes\n    });\n  }, [state.quotes, state.filterAmount]);\n\n  const changeValue = e => {\n    if (e.target.value >= 1) {\n      setState({ ...state,\n        filterAmount: e.target.value\n      });\n    }\n  };\n\n  const loadQuote = async () => {\n    let response = await fetch(\"https://api.kanye.rest/\");\n    let result = await response.json();\n    let new_quotes = [...state.quotes, result];\n    setState({ ...state,\n      quotes: new_quotes\n    });\n  };\n\n  const deleteQuote = q => {\n    let new_quotes = state.quotes.filter(quote => {\n      return !(q === quote);\n    });\n    setState({ ...state,\n      quotes: new_quotes\n    });\n  };\n\n  const deleteQuotes = () => {\n    setState({ ...state,\n      quotes: []\n    });\n  }; // const filterQuotes = () => {\n  //   let quotes = state.quotes;\n  //   let newQuotes = [];\n  //   let wordCount = 1;\n  //   for (let i = 0; i < quotes.length; i++) {\n  //     const currentWord = quotes[i];\n  //     for (let j = 0; j < quotes[i].length; j++) {\n  //       const currentChar = currentWord.charAt(j);\n  //       if (currentChar === \" \") {\n  //         wordCount++;\n  //       }\n  //     }\n  //     if (wordCount >= state.filterAmount) {\n  //       newQuotes.push(currentWord);\n  //     }\n  //     wordCount = 1;\n  //   }\n  //   setState({ ...state, filteredQuotes: newQuotes });\n  // };\n\n\n  return {\n    filterAmount: state.filterAmount,\n    changeValue,\n    deleteQuote,\n    loadQuote,\n    deleteQuotes,\n    filteredQuotes: state.filteredQuotes,\n    quotes: state.quotes,\n    totalQamount: state.quotes.length,\n    totalFamount: state.filteredQuotes.length\n  };\n};\n\n_s(useQuotes, \"Kni1JifDzJknVVMwFFPdPnDFlxU=\");\n\nexport default useQuotes;","map":{"version":3,"sources":["C:/Users/User/Desktop/Koulu/RSO/loppuharkka/src/UseQuotes.js"],"names":["useContext","useEffect","AppContext","useQuotes","state","setState","quotes","newQuotes","wordCount","i","length","currentWord","j","currentChar","charAt","filterAmount","push","filteredQuotes","changeValue","e","target","value","loadQuote","response","fetch","result","json","new_quotes","deleteQuote","q","filter","quote","deleteQuotes","totalQamount","totalFamount"],"mappings":"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","sourcesContent":["import { useContext, useEffect } from \"react\";\r\nimport { AppContext } from \"./app-context\";\r\nconst useQuotes = () => {\r\n  const [state, setState] = useContext(AppContext);\r\n\r\n  useEffect(() => {\r\n    // filterQuotes();\r\n    let quotes = state.quotes;\r\n    let newQuotes = [];\r\n    let wordCount = 1;\r\n    for (let i = 0; i < quotes.length; i++) {\r\n      const currentWord = quotes[i];\r\n      for (let j = 0; j < quotes[i].length; j++) {\r\n        const currentChar = currentWord.charAt(j);\r\n        if (currentChar === \" \") {\r\n          wordCount++;\r\n        }\r\n      }\r\n      if (wordCount >= state.filterAmount) {\r\n        newQuotes.push(currentWord);\r\n      }\r\n      wordCount = 1;\r\n    }\r\n    setState({ ...state, filteredQuotes: newQuotes });\r\n  }, [state.quotes, state.filterAmount]);\r\n\r\n  const changeValue = (e) => {\r\n    if (e.target.value >= 1) {\r\n      setState({ ...state, filterAmount: e.target.value });\r\n    }\r\n  };\r\n  const loadQuote = async () => {\r\n    let response = await fetch(\"https://api.kanye.rest/\");\r\n    let result = await response.json();\r\n    let new_quotes = [...state.quotes, result];\r\n    setState({ ...state, quotes: new_quotes });\r\n  };\r\n  const deleteQuote = (q) => {\r\n    let new_quotes = state.quotes.filter((quote) => {\r\n      return !(q === quote);\r\n    });\r\n    setState({ ...state, quotes: new_quotes });\r\n  };\r\n\r\n  const deleteQuotes = () => {\r\n    setState({ ...state, quotes: [] });\r\n  };\r\n  // const filterQuotes = () => {\r\n  //   let quotes = state.quotes;\r\n  //   let newQuotes = [];\r\n  //   let wordCount = 1;\r\n  //   for (let i = 0; i < quotes.length; i++) {\r\n  //     const currentWord = quotes[i];\r\n  //     for (let j = 0; j < quotes[i].length; j++) {\r\n  //       const currentChar = currentWord.charAt(j);\r\n  //       if (currentChar === \" \") {\r\n  //         wordCount++;\r\n  //       }\r\n  //     }\r\n  //     if (wordCount >= state.filterAmount) {\r\n  //       newQuotes.push(currentWord);\r\n  //     }\r\n  //     wordCount = 1;\r\n  //   }\r\n  //   setState({ ...state, filteredQuotes: newQuotes });\r\n  // };\r\n\r\n  return {\r\n    filterAmount: state.filterAmount,\r\n    changeValue,\r\n    deleteQuote,\r\n    loadQuote,\r\n    deleteQuotes,\r\n    filteredQuotes: state.filteredQuotes,\r\n    quotes: state.quotes,\r\n    totalQamount: state.quotes.length,\r\n    totalFamount: state.filteredQuotes.length,\r\n  };\r\n};\r\n\r\nexport default useQuotes;\r\n"]},"metadata":{},"sourceType":"module"}