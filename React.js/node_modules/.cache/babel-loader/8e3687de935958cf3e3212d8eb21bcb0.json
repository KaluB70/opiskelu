{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useContext, useEffect } from \"react\";\nimport { AppContext } from \"./app-context\";\n\nconst useQuotes = () => {\n  _s();\n\n  const [state, setState] = useContext(AppContext);\n  useEffect(() => {\n    filterQuotes();\n  }, [state.quotes, state.filterAmount]);\n\n  const changeValue = e => {\n    if (e.target.value >= 1) {\n      setState({ ...state,\n        filterAmount: e.target.value\n      });\n    }\n  };\n\n  const loadQuote = () => {\n    fetch(\"https://api.kanye.rest/\").then(response => response.json()).then(json => {\n      let q = json.quote;\n      let new_quotes = [...state.quotes, q];\n      setState({ ...state,\n        quotes: new_quotes\n      });\n    });\n  };\n\n  const deleteQuote = q => {\n    let new_quotes = state.quotes.filter(quote => {\n      return !(q === quote);\n    });\n    setState({ ...state,\n      quotes: new_quotes\n    });\n  };\n\n  const deleteQuotes = () => {\n    setState({ ...state,\n      quotes: []\n    });\n  };\n\n  const filterQuotes = () => {\n    let quotes = state.quotes;\n    let newQuotes = [];\n    let wordCount = 1;\n\n    for (let i = 0; i < quotes.length; i++) {\n      const currentWord = quotes[i];\n\n      for (let j = 0; j < quotes[i].length; j++) {\n        const currentChar = currentWord.charAt(j);\n\n        if (currentChar === \" \") {\n          wordCount++;\n        }\n      }\n\n      if (wordCount >= state.filterAmount) {\n        newQuotes.push(currentWord);\n      }\n\n      wordCount = 1;\n    }\n\n    setState({ ...state,\n      filteredQuotes: newQuotes\n    });\n  };\n\n  return {\n    filterQuotes,\n    changeValue,\n    deleteQuote,\n    loadQuote,\n    deleteQuotes,\n    filteredQuotes: state.filteredQuotes,\n    quotes: state.quotes,\n    totalQamount: state.quotes.length,\n    totalFamount: state.filteredQuotes.length\n  };\n};\n\n_s(useQuotes, \"Kni1JifDzJknVVMwFFPdPnDFlxU=\");\n\nexport default useQuotes;","map":{"version":3,"sources":["C:/Users/User/Desktop/Koulu/RSO/loppuharkka/src/UseQuotes.js"],"names":["useContext","useEffect","AppContext","useQuotes","state","setState","filterQuotes","quotes","filterAmount","changeValue","e","target","value","loadQuote","fetch","then","response","json","q","quote","new_quotes","deleteQuote","filter","deleteQuotes","newQuotes","wordCount","i","length","currentWord","j","currentChar","charAt","push","filteredQuotes","totalQamount","totalFamount"],"mappings":"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","sourcesContent":["import { useContext, useEffect } from \"react\";\r\nimport { AppContext } from \"./app-context\";\r\nconst useQuotes = () => {\r\n  const [state, setState] = useContext(AppContext);\r\n\r\n  useEffect(() => {\r\n    filterQuotes();\r\n  }, [state.quotes, state.filterAmount]);\r\n\r\n  const changeValue = (e) => {\r\n    if (e.target.value >= 1) {\r\n      setState({ ...state, filterAmount: e.target.value });\r\n    }\r\n  };\r\n  const loadQuote = () => {\r\n    fetch(\"https://api.kanye.rest/\")\r\n      .then((response) => response.json())\r\n      .then((json) => {\r\n        let q = json.quote;\r\n        let new_quotes = [...state.quotes, q];\r\n        setState({ ...state, quotes: new_quotes });\r\n      });\r\n  };\r\n  const deleteQuote = (q) => {\r\n    let new_quotes = state.quotes.filter((quote) => {\r\n      return !(q === quote);\r\n    });\r\n    setState({ ...state, quotes: new_quotes });\r\n  };\r\n\r\n  const deleteQuotes = () => {\r\n    setState({ ...state, quotes: [] });\r\n  };\r\n  const filterQuotes = () => {\r\n    let quotes = state.quotes;\r\n    let newQuotes = [];\r\n    let wordCount = 1;\r\n    for (let i = 0; i < quotes.length; i++) {\r\n      const currentWord = quotes[i];\r\n      for (let j = 0; j < quotes[i].length; j++) {\r\n        const currentChar = currentWord.charAt(j);\r\n        if (currentChar === \" \") {\r\n          wordCount++;\r\n        }\r\n      }\r\n      if (wordCount >= state.filterAmount) {\r\n        newQuotes.push(currentWord);\r\n      }\r\n      wordCount = 1;\r\n    }\r\n    setState({ ...state, filteredQuotes: newQuotes });\r\n  };\r\n\r\n  return {\r\n    filterQuotes,\r\n    changeValue,\r\n    deleteQuote,\r\n    loadQuote,\r\n    deleteQuotes,\r\n    filteredQuotes: state.filteredQuotes,\r\n    quotes: state.quotes,\r\n    totalQamount: state.quotes.length,\r\n    totalFamount: state.filteredQuotes.length,\r\n  };\r\n};\r\n\r\nexport default useQuotes;\r\n"]},"metadata":{},"sourceType":"module"}